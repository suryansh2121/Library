// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  SUPERADMIN
  LIBRARIAN
}

model User {
  id           Int          @id @default(autoincrement())
  name         String
  email        String       @unique
  password     String
  membershipId String?      @unique
  phone        String?
  address      String?
  fines        Float        @default(0.0)
  reviews      Review[]
  borrows      Borrow[]     // Renamed from IssuedBook
  wishlist     Wishlist[]
  reservations Reservation[]
  finesRecords Fine[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  slug        String?  @unique
  description String?
  books       Book[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Book {
  id              Int          @id @default(autoincrement())
  title           String
  author          String
  isbn            String       @unique
  description     String?
  publishedYear   Int?
  publisher       String?
  totalCopies     Int
  availableCopies Int
  coverImage      String?
  categoryId      Int
  category        Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  borrows         Borrow[]
  reviews         Review[]
  wishlist        Wishlist[]
  reservations    Reservation[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Borrow {
  id          Int          @id @default(autoincrement())
  userId      Int
  bookId      Int
  issueDate   DateTime     @default(now())
  dueDate     DateTime
  returnDate  DateTime?
  fineCharged Float        @default(0.0)
  status      BorrowStatus @default(ACTIVE)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  book        Book         @relation(fields: [bookId], references: [id], onDelete: Cascade)
  fines       Fine[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum BorrowStatus {
  ACTIVE
  RETURNED
  OVERDUE
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  bookId    Int
  rating    Int      // 1 to 5
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  bookId    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  @@unique([userId, bookId])
}

model Fine {
  id           Int      @id @default(autoincrement())
  userId       Int
  borrowId     Int
  amount       Float
  reason       String
  paid         Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  borrow       Borrow   @relation(fields: [borrowId], references: [id], onDelete: Cascade)
}

model Reservation {
  id              Int               @id @default(autoincrement())
  userId          Int
  bookId          Int
  reservationDate DateTime          @default(now())
  expiryDate      DateTime?
  status          ReservationStatus @default(ACTIVE)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  book            Book              @relation(fields: [bookId], references: [id], onDelete: Cascade)
}

enum ReservationStatus {
  ACTIVE
  FULFILLED
  CANCELLED
}