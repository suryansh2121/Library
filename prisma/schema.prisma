generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id           Int           @id @default(autoincrement())
  name         String
  email        String        @unique
  password     String
  membershipId String?       @unique
  phone        String?
  address      String?
  fines        Float         @default(0.0)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  borrows      Borrow[]
  finesRecords Fine[]
  reservations Reservation[]
  reviews      Review[]
  wishlist     Wishlist[]
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  slug        String?  @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  books       Book[]
}

model Book {
  id              Int           @id @default(autoincrement())
  title           String
  author          String
  isbn            String        @unique
  description     String?
  publishedYear   Int?
  publisher       String?
  totalCopies     Int
  availableCopies Int
  coverImage      String?
  categoryId      Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  category        Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  borrows         Borrow[]
  reservations    Reservation[]
  reviews         Review[]
  wishlist        Wishlist[]
}

model Borrow {
  id          Int          @id @default(autoincrement())
  userId      Int
  bookId      Int
  issueDate   DateTime     @default(now())
  dueDate     DateTime
  returnDate  DateTime?
  fineCharged Float        @default(0.0)
  status      BorrowStatus @default(ACTIVE)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  book        Book         @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  fines       Fine[]
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  bookId    Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  bookId    Int
  createdAt DateTime @default(now())
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
}

model Fine {
  id        Int      @id @default(autoincrement())
  userId    Int
  borrowId  Int
  amount    Float
  reason    String
  paid      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  borrow    Borrow   @relation(fields: [borrowId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reservation {
  id              Int               @id @default(autoincrement())
  userId          Int
  bookId          Int
  reservationDate DateTime          @default(now())
  expiryDate      DateTime?
  status          ReservationStatus @default(ACTIVE)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  book            Book              @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  USER
}

enum BorrowStatus {
  ACTIVE
  RETURNED
  OVERDUE
}

enum ReservationStatus {
  ACTIVE
  FULFILLED
  CANCELLED
}
